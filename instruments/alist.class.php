<?php
if (!defined('MCR')) exit;

class MainConfig {

	public static function SaveOptions() {
	global $config,$bd_names,$bd_money,$bd_users,$site_ways,$info;
		
	$txt  = '<?php'.PHP_EOL;
	$txt .= '$config = '.var_export($config, true).';'.PHP_EOL;
	$txt .= '$bd_names = '.var_export($bd_names, true).';'.PHP_EOL;
	$txt .= '$bd_users = '.var_export($bd_users, true).';'.PHP_EOL;
	$txt .= '$bd_money = '.var_export($bd_money, true).';'.PHP_EOL;
	$txt .= '$site_ways = '.var_export($site_ways, true).';'.PHP_EOL;
	$txt .= '/* This file was auto-generated by '.PROGNAME.' */'.PHP_EOL;
	$txt .= '?>';

		if (file_put_contents(MCR_ROOT.'config.php', $txt) === false) return false;

	return true;
	}
}

class ThemeManager extends View
{

    private $work_skript;
    private $theme_info_cache;

    const tmp_dir = 'tmp/'; // from const dir MCRAFT
    const sign_file = 'sign.txt';

    /** @const */
    public static $false_dir = array(
        '.',
        '..',
        '.htaccess',
    );

    /** @const */
    public static $true_info = array(
        'id',
        'name',
        'version',
        'author',
        'about',
        'editable',
        'work_with',
    );

    public function ThemeManager($style_sd = false, $work_skript = '?mode=control')
    {

        /* 	Show subdirs used: /admin */

        parent::View($style_sd);

        $this->theme_info_cache = null;
        $this->work_skript = $work_skript;
    }

    public static function deleteDir($dirPath)
    {

        if (!is_dir($dirPath))
            return;

        $files = glob($dirPath . '*', GLOB_MARK);

        foreach ($files as $file) {

            if (is_dir($file))
                self::deleteDir($file);
            else
                unlink($file);
        }

        rmdir($dirPath);
    }

    private static function GetThemeDir($theme_id)
    {
        return MCR_STYLE . $theme_id . '/';
    }

    private static function AddFolderToZip($dir, $local_cut, $zipArchive)
    {

        if (!is_dir($dir))
            return false;

        $count = 1;
        $lcut_name = str_replace($local_cut, '', $dir, $count);

        $fdir = opendir($dir);

        $zipArchive->addEmptyDir($lcut_name);

        //echo 'Create dir ' . $lcut_name . '<br>';

        while (($file = readdir($fdir)) !== false) {

            if (in_array($file, self::$false_dir))
                continue;

            $result = false;

            if (is_dir($dir . $file))
                $result = self::AddFolderToZip($dir . $file . '/', $local_cut, $zipArchive);

            elseif (is_file($dir . $file)) {

                $result = $zipArchive->addFile($dir . $file, $lcut_name . $file);
            }

            if ($result === false)
                return false;
        }

        return true;
    }

    private static function EndZipWorkAndDel($zipArchive, $fname)
    {
        $zipArchive->close();
        unlink($fname);
    }

    private static function GenerateTIDbyName($name)
    {
        if (!preg_match("/^[a-zA-Z0-9_-\s]+$/Usi", $name))
            return false;
        return str_replace(' ', '', $name);
    }

    public static function TInstall($post_name)
    {
        if (!POSTGood($post_name, array('zip')))
            return 1;

        $tmp_base_dir = MCRAFT . self::tmp_dir;

        $new_file_info = POSTSafeMove($post_name, $tmp_base_dir);
        if (!$new_file_info)
            return 2;

        $way = $tmp_base_dir . $new_file_info['tmp_name'];

        $zip = new ZipArchive();

        if ($zip->open($way) === false) {
            unlink($way);
            return 3;
        }

        $theme_info = $zip->getFromName(self::sign_file);
        if ($theme_info === false) {
            self::EndZipWorkAndDel($zip, $way);
            return 4;
        }

        $theme_info = self::GetThemeInfo(false, $theme_info);
        if ($theme_info === false or empty($theme_info['name'])) {
            unlink($way);
            return 5;
        }

        $theme_ver = (empty($theme_info['work_with'])) ? false : explode(',', $theme_info['work_with']);
        if ($theme_ver !== false and !in_array(MCR, $theme_ver))
            return 9;

        $theme_dir = self::GetThemeDir($theme_info['id']);

        if (!is_dir($theme_dir)) {

            if (mkdir($theme_dir, 0766, true) === false) {
                self::EndZipWorkAndDel($zip, $way);
                return 7;
            }
        } else {

            self::deleteDir($theme_dir);
        }

        if ($zip->extractTo($theme_dir) === false) {
            self::EndZipWorkAndDel($zip, $way);
            return 8;
        }

        self::EndZipWorkAndDel($zip, $way);
        return $theme_info;
    }

    public static function DeleteTheme($theme_id)
    {
        global $config;

        if ($theme_id === View::def_theme)
            return false;
        $theme_dir = self::GetThemeDir($theme_id);

        if (!is_dir($theme_dir))
            return false;

        self::deleteDir($theme_dir);

        if ($config['s_theme'] === $theme_id) {

            $config['s_theme'] = View::def_theme;
            MainConfig::SaveOptions();
        }

        return true;
    }

    public static function DownloadTInstaller($theme_id)
    {
        $theme_info = self::GetThemeInfo($theme_id);
        if ($theme_info === false)
            return false;

        self::SaveThemeInfo($theme_id, $theme_info);

        $tmp_base_dir = MCRAFT . self::tmp_dir;
        $tmp_fname = tmp_name($tmp_base_dir);
        $tmp_file = $tmp_base_dir . $tmp_fname;

        if (!file_put_contents($tmp_file, base64_decode('UEsFBgAAAAAAAAAAAAAAAAAAAAAAAA==')))
            return false; // some windows servers fail to create by ZipArchive module

        $zip = new ZipArchive();
        $zip_error = $zip->open($tmp_file, ZipArchive::OVERWRITE);

        if ($zip_error !== true) {
            vtxtlog('Cant create zip : error code: ' . $zip_error);
            return false;
        }

        $result = self::addFolderToZip(self::GetThemeDir($theme_id), self::GetThemeDir($theme_id), $zip);
        if ($result === false)
            return false;

        $zip->close();

        $fsize = filesize($tmp_file);
        if ($fsize === false)
            return false;

        if (round($fsize / 1048576) > 50) {
            unlink($tmp_file);
            return false;
        }

        $out_name = urlencode('mcr_' . $theme_id . '.zip');

        header('Content-Type:application/zip;name=' . $out_name);
        header('Content-Transfer-Encoding:binary');
        header('Content-Length:' . $fsize);
        header('Content-Disposition:attachment;filename=' . $out_name);
        header('Expires:0');
        header('Cache-Control:no-cache, must-revalidate');
        header('Pragma:no-cache');

        readfile($tmp_file);
        unlink($tmp_file);
    }

    public function isThemesEnabled()
    {
        global $config;

        if ($this->theme_info_cache === 'depricated')
            return false;

        if (!isset($config['s_theme']) or file_exists(MCR_STYLE . 'index.html')) {

            $this->theme_info_cache = 'depricated';
            return false;
        }

        return true;
    }

    public function ShowThemeSelectorOpt()
    {
        global $config;

        if (!$this->isThemesEnabled())
            return '<option value="-1">' . lng('NOT_SET') . '</option>';

        $theme_list = $this->GetThemeList();

        $html_list = '';

        for ($i = 0; $i < sizeof($theme_list); $i++)
            $html_list .= '<option value="' . $theme_list[$i]['id'] . '" ' . (($theme_list[$i]['id'] === $config['s_theme']) ? 'selected' : '' ) . '>' . $theme_list[$i]['name'] . '</option>';

        return $html_list;
    }

    public function ShowThemeSelector()
    {
        global $config;

        if (!$this->isThemesEnabled())
            return '';

        $theme_cur = isset($config['s_theme']) ? $config['s_theme'] : View::def_theme;

        $theme_list = $this->GetThemeList();

        $html_theme_list = $this->ShowThemeSelectorOpt();

        ob_start();

        foreach ($theme_list as $key => $theme_info)
            include $this->GetView('admin/theme/theme_item.html');

        $theme_items_info = ob_get_clean();

        ob_start();

        include $this->GetView('admin/theme/theme_select.html');

        return ob_get_clean();
    }

    public function GetThemeList()
    {

        if ($this->theme_info_cache != null)
            return $this->theme_info_cache;

        if (!$this->isThemesEnabled())
            return $this->theme_info_cache;

        $this->theme_info_cache = array();

        if ($theme_dir = opendir(MCR_STYLE)) {

            while (false !== ($theme = readdir($theme_dir))) {

                if (in_array($theme, self::$false_dir) or !is_dir(MCR_STYLE . $theme) or !file_exists(MCR_STYLE . $theme . '/' . self::sign_file))
                    continue;

                else {

                    $theme_info = self::GetThemeInfo($theme);
                    if ($theme_info === false)
                        continue;

                    $this->theme_info_cache[] = $theme_info;
                }
            }

            closedir($theme_dir);
        }

        return $this->theme_info_cache;
    }

    public static function SaveThemeInfo($theme_id, $theme_info, $editable = false)
    {

        if (empty($theme_info['name']))
            return false;

        $fp = fopen(self::GetThemeDir($theme_id) . self::sign_file, "w");
        if ($fp === false)
            return false;

        flock($fp, LOCK_EX);

        foreach ($theme_info as $key => $value) {

            if ($key == 'id' or $key == 'editable')
                continue;
            fwrite($fp, $key . '=' . $value . "; \r\n");
        }

        fwrite($fp, 'editable=' . (($editable) ? 'yes' : 'no' ) . "; \r\n");

        flock($fp, LOCK_UN);
        fclose($fp);

        return true;
    }

    public static function GetThemeInfo($theme_id, $theme_info_txt = false)
    {

        $theme_info = array();
        $theme_info['id'] = false;

        if (!$theme_id and !$theme_info_txt)
            return false;

        if ($theme_id) {

            $theme_info['id'] = $theme_id;
            $sign_file = self::GetThemeDir($theme_id) . self::sign_file;

            if (!file_exists($sign_file))
                return false;

            if (filesize($sign_file) > 128 * 1024)
                return false;

            $theme_info_txt = file_get_contents($sign_file);
        }

        $theme_info_txt = explode(';', $theme_info_txt);

        if (!sizeof($theme_info_txt))
            return false;

        for ($i = 0; $i < sizeof($theme_info_txt); $i++) {

            for ($b = 0; $b < sizeof(self::$true_info); $b++) {

                if (!substr_count($theme_info_txt[$i], self::$true_info[$b]))
                    continue;

                $info_value = explode('=', $theme_info_txt[$i]);

                if (sizeof($info_value) == 2)
                    $theme_info[self::$true_info[$b]] = trim(preg_replace('/\s{2,}/', ' ', nl2br($info_value[1])));
            }
        }

        if (empty($theme_info['id'])) {

            if (!empty($theme_info['name']))
                $theme_info['id'] = self::GenerateTIDbyName($theme_info['name']);
            else
                return false;
        }

        return $theme_info;
    }

}

class ControlManager extends View {
private $work_skript;

    public function ControlManager($style_sd = false, $work_skript = '?mode=control') { 

        /*	Show subdirs used: /admin */

        parent::View($style_sd);

        $this->work_skript = $work_skript;	
    }

    public function ShowUserListing($list = 1, $search_by = 'name', $input = false) {
    global $bd_users,$bd_names;            

        if ($input == 'banned') $input = 0;

        switch($search_by) {
            case 'name' : 
                $sql = "SELECT `{$bd_users['id']}` FROM `{$bd_names['users']}` "
                     . "WHERE {$bd_users['login']} LIKE :input "
                     . "ORDER BY {$bd_users['login']} LIMIT " . (10 * ($list - 1)) . ",10";
                $countSql = "SELECT COUNT(*) FROM `{$bd_names['users']}` WHERE {$bd_users['login']} LIKE :input";
                $input = array('input' => '%' . $input . '%');
                
                $result = getDB()->ask($sql, $input);
            break;
            case 'none' : 
                $sql = "SELECT `{$bd_users['id']}` FROM `{$bd_names['users']}` "
                     . "ORDER BY {$bd_users['login']} LIMIT " . (10 * ($list - 1)) . ",10";
                $countSql = "SELECT COUNT(*) FROM `{$bd_names['users']}`";
                $input = false;
                
                $result = getDB()->ask($sql); 
            break;
            case 'ip' :  
                $sql  = "SELECT `{$bd_users['id']}` FROM `{$bd_names['users']}` "
                      . "WHERE {$bd_users['ip']} LIKE :input "
                      . "ORDER BY {$bd_users['login']} LIMIT " . (10 * ($list - 1)) . ",10";
                $countSql = "SELECT COUNT(*) FROM `{$bd_names['users']}` WHERE {$bd_users['ip']} LIKE :input";  
                $input = array('input' => '%' . $input . '%');
                
                $result = getDB()->ask($sql, $input); 
            break;
            case 'lvl' :
                $result = getDB()->fetchRow("SELECT `id` FROM `{$bd_names['groups']}` WHERE `lvl`=':input'", $input, 'num');
                $input = $result[0];
                $sql = "SELECT `{$bd_users['id']}` FROM `{$bd_names['users']}` "
                     . "WHERE `{$bd_users['group']}` = ':input' "
                     . "ORDER BY {$bd_users['login']} LIMIT " . (10 * ($list - 1)) . ",10";
                $countSql = "SELECT COUNT(*) FROM `{$bd_names['users']}` WHERE `{$bd_users['group']}`=':input'";
                $input = array('input' => $input);
                
                $result = getDB()->ask($sql, $input); 
             break;
        }

        ob_start();   

        while ( $line = $result->fetch('num') ) { 
            
            if (!isset($found)) {
                include $this->GetView('admin/user/user_find_header.html'); 
                $found = true;
            }
            
            $inf_user = new User($line[0]);

            $user_name = $inf_user->name();
            $user_id   = $inf_user->id();
            $user_ip   = $inf_user->ip();
            $user_lvl  = $inf_user->getGroupName();
            $user_lvl_id = $inf_user->group();

            unset($inf_user);

            include $this->GetView('admin/user/user_find_string.html'); 
        } 
        
        if (!isset($found)) { include $this->GetView('admin/user/user_not_found.html'); return ob_get_clean(); }  

        include $this->GetView('admin/user/user_find_footer.html'); 

        $html = ob_get_clean();

        $line = getDB()->fetchRow($countSql, $input, 'num');
        $html .= $this->arrowsGenerator($this->work_skript, $list, $line[0], 10);

        return $html;
    }
	
    public function ShowServers($list) 
    { 
    global $bd_names;

        ob_start(); 	

        include $this->GetView('admin/server/servers_caption.html');

            // TODO increase priority by votes

        $result = getDB()->ask("SELECT * FROM `{$bd_names['servers']}` ORDER BY priority DESC LIMIT ".(10*($list-1)).",10");  
			
        while ( $line = $result->fetch() ) {
            
            if (!isset($found)) {
                
                $found = true;
                include $this->GetView('admin/server/servers_header.html'); 
            }
            
            $server_name     = $line['name'];
            $server_address  = $line['address'];
            $server_info     = $line['info'];
            $server_port     = $line['port'];
            $server_method   = '';

            switch ((int)$line['method']) {
                case 0: $server_method = 'Simple query'; break;
                case 1: $server_method = 'Query'; break; 
                case 2: $server_method = 'RCON'; break;
                case 3: $server_method = 'JSONAPI'; break;
            }		
            
            $server_id = $line['id'];

            include $this->GetView('admin/server/servers_string.html');         
        }
        
 	if (!isset($found)) { include $this->GetView('admin/server/servers_not_found.html'); return ob_get_clean(); }  
		       
	include $this->GetView('admin/server/servers_footer.html'); 
	$html = ob_get_clean();

        $result = getDB()->fetchRow("SELECT COUNT(*) FROM `{$bd_names['servers']}`", false, 'num');

        $html .= $this->arrowsGenerator($this->work_skript, $list, $result[0], 10);

        return $html;
    }
	
    public function ShowIpBans($list) {
    global $bd_names;

        RefreshBans();

        ob_start(); 	

        include $this->GetView('admin/ban/ban_ip_caption.html');

        $result = getDB()->ask("SELECT * FROM `{$bd_names['ip_banning']}` ORDER BY ban_until DESC LIMIT ".(10*($list-1)).",10");  

        while ( $line = $result->fetch()) {
            
            if (!isset($found)) {                
                $found = true;
                include $this->GetView('admin/ban/ban_ip_header.html'); 
            }
            
            $ban_ip    = $line['IP'];
            $ban_start = $line['time_start'];
            $ban_end   = $line['ban_until'];
            $ban_type  = $line['ban_type'];
            $ban_reason  = $line['reason'];			 

            include $this->GetView('admin/ban/ban_ip_string.html');         
        }

        if (!isset($found)) { include $this->GetView('admin/ban/ban_ip_not_found.html'); return ob_get_clean(); }  

        include $this->GetView('admin/ban/ban_ip_footer.html'); 
        $html = ob_get_clean();

        $result = getDB()->fetchRow("SELECT COUNT(*) FROM `{$bd_names['ip_banning']}`", false, 'num');

        $html .= $this->arrowsGenerator($this->work_skript, $list, $result[0], 10);

        return $html;
    }
}
